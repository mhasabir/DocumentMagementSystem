#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Record
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DocumentManagement")]
	public partial class LinqToSql2DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDocumentAndGroupTable(DocumentAndGroupTable instance);
    partial void UpdateDocumentAndGroupTable(DocumentAndGroupTable instance);
    partial void DeleteDocumentAndGroupTable(DocumentAndGroupTable instance);
    partial void InsertUserAndDocumentTable(UserAndDocumentTable instance);
    partial void UpdateUserAndDocumentTable(UserAndDocumentTable instance);
    partial void DeleteUserAndDocumentTable(UserAndDocumentTable instance);
    partial void InsertUserAndGroupTable(UserAndGroupTable instance);
    partial void UpdateUserAndGroupTable(UserAndGroupTable instance);
    partial void DeleteUserAndGroupTable(UserAndGroupTable instance);
    #endregion
		
		public LinqToSql2DataContext() : 
				base(global::Record.Properties.Settings.Default.DocumentManagementConnectionString4, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSql2DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSql2DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSql2DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSql2DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DocumentAndGroupTable> DocumentAndGroupTables
		{
			get
			{
				return this.GetTable<DocumentAndGroupTable>();
			}
		}
		
		public System.Data.Linq.Table<UserAndDocumentTable> UserAndDocumentTables
		{
			get
			{
				return this.GetTable<UserAndDocumentTable>();
			}
		}
		
		public System.Data.Linq.Table<UserAndGroupTable> UserAndGroupTables
		{
			get
			{
				return this.GetTable<UserAndGroupTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentAndGroupTable")]
	public partial class DocumentAndGroupTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _doc_group_id;
		
		private string _doc_id;
		
		private string _group_id;
		
		private string _doc_right;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ondoc_group_idChanging(int value);
    partial void Ondoc_group_idChanged();
    partial void Ondoc_idChanging(string value);
    partial void Ondoc_idChanged();
    partial void Ongroup_idChanging(string value);
    partial void Ongroup_idChanged();
    partial void Ondoc_rightChanging(string value);
    partial void Ondoc_rightChanged();
    #endregion
		
		public DocumentAndGroupTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doc_group_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int doc_group_id
		{
			get
			{
				return this._doc_group_id;
			}
			set
			{
				if ((this._doc_group_id != value))
				{
					this.Ondoc_group_idChanging(value);
					this.SendPropertyChanging();
					this._doc_group_id = value;
					this.SendPropertyChanged("doc_group_id");
					this.Ondoc_group_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doc_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string doc_id
		{
			get
			{
				return this._doc_id;
			}
			set
			{
				if ((this._doc_id != value))
				{
					this.Ondoc_idChanging(value);
					this.SendPropertyChanging();
					this._doc_id = value;
					this.SendPropertyChanged("doc_id");
					this.Ondoc_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string group_id
		{
			get
			{
				return this._group_id;
			}
			set
			{
				if ((this._group_id != value))
				{
					this.Ongroup_idChanging(value);
					this.SendPropertyChanging();
					this._group_id = value;
					this.SendPropertyChanged("group_id");
					this.Ongroup_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doc_right", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string doc_right
		{
			get
			{
				return this._doc_right;
			}
			set
			{
				if ((this._doc_right != value))
				{
					this.Ondoc_rightChanging(value);
					this.SendPropertyChanging();
					this._doc_right = value;
					this.SendPropertyChanged("doc_right");
					this.Ondoc_rightChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAndDocumentTable")]
	public partial class UserAndDocumentTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_doc_id;
		
		private string _user_id;
		
		private string _doc_id;
		
		private string _doc_right;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_doc_idChanging(int value);
    partial void Onuser_doc_idChanged();
    partial void Onuser_idChanging(string value);
    partial void Onuser_idChanged();
    partial void Ondoc_idChanging(string value);
    partial void Ondoc_idChanged();
    partial void Ondoc_rightChanging(string value);
    partial void Ondoc_rightChanged();
    #endregion
		
		public UserAndDocumentTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_doc_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_doc_id
		{
			get
			{
				return this._user_doc_id;
			}
			set
			{
				if ((this._user_doc_id != value))
				{
					this.Onuser_doc_idChanging(value);
					this.SendPropertyChanging();
					this._user_doc_id = value;
					this.SendPropertyChanged("user_doc_id");
					this.Onuser_doc_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doc_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string doc_id
		{
			get
			{
				return this._doc_id;
			}
			set
			{
				if ((this._doc_id != value))
				{
					this.Ondoc_idChanging(value);
					this.SendPropertyChanging();
					this._doc_id = value;
					this.SendPropertyChanged("doc_id");
					this.Ondoc_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doc_right", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string doc_right
		{
			get
			{
				return this._doc_right;
			}
			set
			{
				if ((this._doc_right != value))
				{
					this.Ondoc_rightChanging(value);
					this.SendPropertyChanging();
					this._doc_right = value;
					this.SendPropertyChanged("doc_right");
					this.Ondoc_rightChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAndGroupTable")]
	public partial class UserAndGroupTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_group_id;
		
		private string _user_id;
		
		private string _group_id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_group_idChanging(int value);
    partial void Onuser_group_idChanged();
    partial void Onuser_idChanging(string value);
    partial void Onuser_idChanged();
    partial void Ongroup_idChanging(string value);
    partial void Ongroup_idChanged();
    #endregion
		
		public UserAndGroupTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_group_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_group_id
		{
			get
			{
				return this._user_group_id;
			}
			set
			{
				if ((this._user_group_id != value))
				{
					this.Onuser_group_idChanging(value);
					this.SendPropertyChanging();
					this._user_group_id = value;
					this.SendPropertyChanged("user_group_id");
					this.Onuser_group_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string group_id
		{
			get
			{
				return this._group_id;
			}
			set
			{
				if ((this._group_id != value))
				{
					this.Ongroup_idChanging(value);
					this.SendPropertyChanging();
					this._group_id = value;
					this.SendPropertyChanged("group_id");
					this.Ongroup_idChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
